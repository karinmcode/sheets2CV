#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# """
# Created on Tue Aug 25 14:08:21 2023

# @author: karinmorandell
#"""

from reportlab.lib.units import cm
from reportlab.lib.pagesizes import A4
W, H = A4



from reportlab.pdfgen import canvas

from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate,PageTemplate,NextPageTemplate, Frame, FrameBreak, Paragraph, Spacer, Table, TableStyle
from reportlab.platypus import Image as ReportLabImage # for logos
from reportlab.platypus.flowables import Flowable
from reportlab.lib.enums import TA_LEFT, TA_JUSTIFY
from reportlab.lib.colors import HexColor


from PIL import Image as piImage
import os
import re

from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont


# Register the font files (assuming they are in a 'fonts' directory relative to your script)
font_files = [f for f in os.listdir("fonts/") if f.endswith(".ttf")]

# Register each font
for font_file in font_files:
    font_name = os.path.splitext(font_file)[0]  # Extract the font name without extension
    pdfmetrics.registerFont(TTFont(font_name, os.path.join("fonts", font_file)))



################################################################################################
###### FUNCTIONS
################################################################################################




def checkParams(params):
    ################################################################################################
    ################################################################################################
    ###### MAIN STYLING VARIABLES
    ################################################################################################
    ################################################################################################
    
    default_params = {
        'gray_level':       0.5,
        'color':            colors.Color(0.5, 0.1, 0.1) ,
        'fontname':         'calibri',
        'fontname_headers': 'calibri_bold',
        'vertical_offset': 0.15,# Vertical offset between section titles and diffrent subsections
        }


    # check if params has those fields defined
    
    for key in default_params:
        
        if key not in params:
            params[key] = default_params[key]
            

    RGB = params['color_rgb']
    params['color'] = colors.Color(RGB[0],RGB[1],RGB[2])

            
    g = params['gray_level']
    params['color_grey'] = colors.Color(g, g, g)
    g = params['color_grey']
    params['color_grey_hex'] = params['color_grey'].hexval()

    params['logo_cal'] = changeLogo("icons/calendar.png",params['gray_level'])


    return params

def make_brighter(color, factor=0.5):
    """
    Make a color brighter.
    
    Parameters:
    - color: Either a tuple of (R, G, B) values, each in the range [0, 255], or a HEX string.
    - factor: A value between 0 (original color) and 1 (white). Default is 0.5.
    
    Returns:
    - A color in the same format as the input (either RGB tuple or HEX string).
    """
    
    # Determine if the input is RGB or HEX
    if isinstance(color, tuple):
        r, g, b = color
    elif isinstance(color, str) and color.startswith("#"):
        r, g, b = int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16)
    else:
        raise ValueError("Invalid color format. Expected RGB tuple or HEX string.")
    
    # Make the color brighter
    r = int(r + (255 - r) * factor)
    g = int(g + (255 - g) * factor)
    b = int(b + (255 - b) * factor)
    
    # Return in the format of the input
    if isinstance(color, tuple):
        return (r, g, b)
    else:
        return "#{:02X}{:02X}{:02X}".format(r, g, b)

def colored_banner_and_footer(canvas, doc):
    # Draw the colored banner
    params = doc.params

    banner_width = A4[0]
    banner_height = params['header_height']
    lightColor = params['color_hex']
    lightColor = make_brighter(lightColor,factor=0.75)
    canvas.setFillColor(lightColor)
    canvas.rect(0, A4[1] - banner_height, banner_width, banner_height, fill=True,stroke=0)
    
    # Add footer text
    footer_text = 'CV generated by sheets2CV by karinmcode Â© (visit my GitHub for collaboration)'  
    footer_text_size = 10  # Default to size 10 if not provided
    footer_text_color = params['color_grey_hex']  # Default to black if not provided
    footer_fontname = "calibri_italic"
    footer_fontname = "calibri_light"
    canvas.setFont(footer_fontname, footer_text_size)
    canvas.setFillColor(HexColor(footer_text_color))
    
    # Calculate the width of the footer text
    text_width = canvas.stringWidth(footer_text, footer_fontname, footer_text_size)
    
    # Set the x-coordinate for the right-aligned text
    x_coordinate = A4[0] - text_width - 1*cm  # 10 is a margin from the right edge of the page

    # Set the y-coordinate for the footer text
    y_coordinate = 0.3*cm  # Margin from the bottom of the page

    # The following positions the footer text at the bottom right of the page
    canvas.drawString(x_coordinate, y_coordinate, footer_text)
    
    # Adding a clickable link to the footer text
    link_rect = (x_coordinate, y_coordinate, x_coordinate + text_width, y_coordinate + footer_text_size)
    canvas.linkURL("https://github.com/karinmcode", link_rect, relative=1, thickness=0, color=HexColor(footer_text_color))







class HealthBar(Flowable):
    # init function
    def __init__(self, width, height, color, level):
        Flowable.__init__(self)
        self.width = width
        self.height = height
        self.color = color
        self.level = level
        
    def draw(self):

        # Draw the filled segment of the bar with rounded corners
        bar_width = self.width * self.level
        self.canv.setFillColor(self.color)
        self.canv.roundRect(0, 0, bar_width, self.height, self.height / 2, stroke=0, fill=1)
        
        # If bar isn't full, overlay a white or colored rectangle to cover the right rounded corner of the filled segment
        if self.level < 1:
            self.canv.setFillColor(self.color)
            #self.canv.rect(bar_width - self.height / 2, 0, self.height / 2, self.height, fill=1, stroke=0)
            x = bar_width 
            y = 0
            w = -self.height / 3
            h = self.height
            self.canv.rect(x , y, w,h , fill=1, stroke=0)
        elif self.level <0.3:
            self.canv.setFillColor(colors.Color(255, 255, 255))
            #self.canv.rect(bar_width - self.height / 2, 0, self.height / 2, self.height, fill=1, stroke=0)
            x = bar_width - self.height / 3 
            y = 0
            w = self.height / 2
            h = self.height
            self.canv.rect(x , y, w,h , fill=1, stroke=0)            
            
        # Draw a full-width rounded rectangle as background
        self.canv.setLineWidth(0.5)  # Set the line thickness to 2 points
        self.canv.setStrokeColor(colors.Color(0, 0, 0))  # Set outline color to black
        self.canv.roundRect(0, 0, self.width, self.height, self.height / 2, stroke=1, fill=0)


def addHealthBarList(obj,list2split,params,**kwargs):
    
    
    if 'width' in kwargs:
        total_width = kwargs['width']
    else:
        total_width = 6*cm
        
    if 'style' in kwargs:
        style = kwargs['style']
    else:
        styles = getSampleStyleSheet()

        style = ParagraphStyle(
            name='healthbarlist',
            parent=styles['Normal'],  # Start with an existing style
            fontSize=11,
            textColor="Black",
            fontName=params['fontname'],
        )     
        
        
    icon_width = 0.8*cm
    text_width = total_width-icon_width
    
    # Healthbar_Table: 2 columns and n rows
    # Reminder : The coordinates are given in the format (column, row)
    Healthbar_Table_style = TableStyle([
        ('VALIGN',      (0, 0), (1, -1), 'TOP'),# all cells
        ('LEFTPADDING', (0, 0), (-1, -1), 0.3*cm),# all columns
        ('TOPPADDING',  (1, 0), (1, -1), -0.1*cm),# second column
        ] )
    
    
    TableArray = []
    
    for index,item in enumerate(list2split.split(';')):

        text = re.split('<', item)[0]
        thisLevel= float(re.findall('<([0-9\.]*)>', item)[0])
        hb=HealthBar(width=0.5*cm,height=0.15*cm,color=params['color_hex'],level=thisLevel)
        
        p = Paragraph(text,style)
        TableArray.append([hb, p])
    

    
    # Generate row heights using numpy's broadcasting    
    Healthbar_Table = Table(TableArray, colWidths=[icon_width, text_width])
    Healthbar_Table.setStyle(Healthbar_Table_style)
    obj.append(Healthbar_Table)
    
    
    return obj


class HorizontalLine(Flowable):
    # init function
    def __init__(self, width, color):
        Flowable.__init__(self)
        self.width = width
        self.color = color

    # drawing the line
    def draw(self):
        self.canv.setStrokeColor(self.color)
        self.canv.line(0, 0, self.width, 0)

### DATE FUNCTIONS

def get_date_paragraph(date1,date2,params,styles):
    
    if date1 == date2:
        dates = str(round(date1))
    else:
        dates = str(round(date1))+'-'+str(round(date2))
        
    p_date = Paragraph('  '+dates, styles['dates'])
    
    return p_date

def get_date_text(date1,date2):
    
    if date1 == date2:
        dates = str(round(date1))
    else:
        dates = str(round(date1))+'-'+str(round(date2))
        
    
    return dates

def get_date_table(date1,date2,params,col_width1,date_col_width=0.45,vAlign=None):
    styles = params['styles']
    logo_cal = params['logo_cal']
    p_date = get_date_paragraph(date1,date2,params,styles)

    date_table = Table(
        [  
        [logo_cal, p_date] ,
          ],
        colWidths=[date_col_width*cm , (col_width1-date_col_width)*cm],
        hAlign='LEFT',
        
        )
    
    # Initial table style
    style = [
        ('HALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('TOPPADDING', (0, 0), (-1, -1), 0.04 * cm),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 0),
        ('LEFTPADDING', (0, 0), (-1, -1), 0),
        ('RIGHTPADDING', (0, 0), (-1, -1), 0),
        ('BOTTOMPADDING', (1, 0), (-1, -1), 0.1 * cm),
    ]

    # Update style if vAlign is provided
    if vAlign is not None:
        style.append(('VALIGN', (0, 0), (-1, -1), vAlign))

    # Set the table style
    date_table.setStyle(TableStyle(style))    
    

    return date_table
    
def get_location_table(location,params,col_width):
    styles = params['styles']
    logo_loc = changeLogo("icons/location.png",params['gray_level'])
    p_loc = Paragraph('  '+location, styles['location'])
    
    loc_table = Table(
        [  
        [logo_loc, p_loc] ,
          ],
        colWidths=[0.45*cm , (col_width-0.45)*cm],
        rowHeights=0.55*cm,
        hAlign='LEFT',
        vAlign='BOTTOM',
        )
    
    
    loc_table.setStyle(TableStyle(
        [
        ('HALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'BOTTOM'),
        # ('GRID',(0, 0), (-1, -1),1,colors.blueviolet),
        ('TOPPADDING',(0, 0), (-1, -1),0*cm),
        ('LEFTPADDING',(0, 0), (-1, -1),-0.10*cm),
        ('RIGHTPADDING',(0, 0), (-1, -1),0),
        ('BOTTOMPADDING',(0, 0), (0, -1),0*cm),# logo
        ('BOTTOMPADDING',(1, 0), (-1, -1),0.05*cm),# text
        ])  
        ) 
    return loc_table


def get_publication_table(publication,params,col_width):
    styles = params['styles']
    
    logo = changeLogo("icons/publication.png", params['gray_level'])    
    pub = publication['text']
    url = publication['url']
    text = f'<link href="{url}">{pub}</link>'
    p = Paragraph(text,styles['publications'])
    
    pub_table = Table(
        [  
        [logo, p] ,
          ],
        colWidths=[0.45*cm , (col_width-0.45)*cm],
        rowHeights=0.45*cm,
        hAlign='LEFT',
        )
    
    pub_table.setStyle(TableStyle(
        [
        ('HALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (0, -1), 'BOTTOM'),#logo
        ('VALIGN', (1, 0), (1, -1), 'TOP'),# text
        # ('GRID',(0, 0), (-1, -1),1,colors.blueviolet),
        ('TOPPADDING',(0, 0), (-1, -1),0*cm),
        ('LEFTPADDING',(0, 0), (-1, -1),0*cm),
        ('RIGHTPADDING',(0, 0), (-1, -1),0),
        ('BOTTOMPADDING',(0, 0), (0, -1),0*cm),# logo
        ('BOTTOMPADDING',(1, 0), (-1, -1),0*cm),# text
        ])  
        ) 
    return pub_table


def addEvent(elements,date1,date2,position,location,params,**kwargs):
    
        
    col_width1 = 2.3#cm
    current_frame = params['frame_body']
    body_frame_width = current_frame._aW# availabel width
    col_width2 = (body_frame_width-col_width1*cm)/cm

    # Make styles for each part of the event:

    # Load default sample styles
    styles = params['styles']
            

    ## MAKE POSITION
    p_pos = Paragraph(position ,  styles['position'] )
    

    ## MAKE DATE and LOCATION TABLES
    date_table = get_date_table(date1,date2,params,col_width1)
    loc_table=get_location_table(location,params,col_width2)
    
    ## MAKE DATE-POSITION-LOCATION TABLE

    event_table = Table(
        [  
        [date_table, p_pos] ,
        ['',loc_table]
          ],
        colWidths=[col_width1*cm ,col_width2*cm],
        hAlign='LEFT',
        
        )
    
    event_table.setStyle(TableStyle(
        [
        ('HALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        # ('GRID',(0, 0), (-1, -1),1,colors.violet),
        ('TOPPADDING',(0, 0), (-1, -1),0),
        ('BOTTOMPADDING',(0, 0), (-1, -1),0),
        ('LEFTPADDING',(0, 0), (-1, -1),0),
        ('RIGHTPADDING',(0, 0), (-1, -1),0),
        ])  
        )      
    
    elements.append(event_table)
    
    elements.append(Spacer(1, 0.1*cm))# width and height

    
    #### DESCRIPTION
    description_table_content = []
    if 'descriptions' in kwargs:
        descriptions = kwargs['descriptions']
        
        ndes = len(descriptions)
        if ndes !=0:
            for ides in range(0,ndes):
                d = descriptions[ides]
                
                if 'Skills' in d:
                    d = d.replace('Project:','<b>Project:</b>')
                    d = d.replace('Skills:','<b>Skills:</b>')
    
                    d = d.replace('Project:','â¢ Project:')
                    d = d.replace('Skills:','â¢ Skills:')
                else:
                    d = d.replace('Project:','<b>Project:</b>')
                    
                description_table_content.append(Paragraph(d,styles['project']))            
    
    if 'achievements' in kwargs:
        
        description_table_content.append(Spacer(1, 0.2*cm))
        thisdata = kwargs['achievements']
        if isinstance(thisdata,str):
            achievements_list = thisdata.split('- ')
            achievements_list = [item for item in achievements_list if item.strip() != '']
        else:
            achievements_list = thisdata

        n = len(achievements_list)
        if n !=0:
    
                # Bullet point style
                ach_style = ParagraphStyle('bulletStyle', parent=styles['Normal'], 
                                  bulletFontName='Calibri', bulletFontSize=12, bulletIndent=0, alignment=TA_JUSTIFY)


                achievements_elements = [Paragraph("â¢ " + item, style=ach_style) for item in achievements_list]    
                description_table_content.extend(achievements_elements)            
    
    
    
    if 'publications' in kwargs:
        publications = kwargs['publications']



        npub = len(publications)
        if npub !=0:
            for ipub in range(0,npub):

                pub_table = get_publication_table(publications[ipub],params,col_width2)
                description_table_content.append(pub_table)
                
        description_table_content.append(Spacer(1, 0.2*cm))

    # put in second column of table
    if 'descriptions' in kwargs:
        description_table = Table(
            [  ['',description_table_content]          ],
            colWidths=[col_width1*cm ,col_width2*cm],
            hAlign='LEFT',
            )
        
        description_table.setStyle(TableStyle(
            [
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),     
            ('HALIGN', (0, 0), (-1, -1), 'LEFT'),      
            ('TOPPADDING',(0, 0), (-1, -1),0),
            ('BOTTOMPADDING',(0, 0), (-1, -1),0),
            ('LEFTPADDING',(0, 0), (-1, -1),0),
            ('RIGHTPADDING',(0, 0), (-1, -1),0),    
            ]
            ))
        
        
        elements.append(description_table)
        
    return elements

       
def addSection(elements,text,width,section_color,fontname_headers,spacer_offset):
    
    styles = getSampleStyleSheet()
    
    if isinstance(section_color,colors.Color) : #type(section_color)
        section_color = section_color.hexval()
        
    # Section Style
    styles.add(ParagraphStyle(
        name='section',
        parent=styles['Heading3'],  # Start with an existing style
        textColor=section_color,
        fontSize=12,
        fontName=fontname_headers,
        italic=False,
        bold=True,
    ))

    
    elements.append(Paragraph(text.upper(), styles['section']))
    # Add a horizontal line separator
    elements.append(HorizontalLine(width=width, color=section_color))
    elements.append(Spacer(1, spacer_offset*cm))
    
    return elements        
    

def changeLogo(url,alpha):

    a = round(alpha*10)
    new_url = url.replace('.png',f'_alpha{a}.png')
    
    if os.path.isfile(new_url):
        # Create a ReportLabImage instance with the specified image URL and mask
        im = ReportLabImage(new_url, width=0.4*cm, height=0.4*cm)
    else:
        im = piImage.open(url)
    
        # Convert the image to RGBA mode
        im = im.convert("RGBA")
    
        # Get the pixel data as a list of tuples
        pixel_data = list(im.getdata())
        
        # Replace pixel values below 10 with alpha
        alpha = round(255*alpha)
        modified_pixel_data = [(alpha, alpha, alpha, pixel[3]) if all(val < 50 for val in pixel[:3]) else pixel for pixel in pixel_data]
        
        # Create a new image with the modified pixel data
        modified_im = piImage.new("RGBA", im.size)
        modified_im.putdata(modified_pixel_data)
        
        modified_im.save(new_url)
    
        # Create a ReportLabImage instance with the specified image URL and mask
        im = ReportLabImage(new_url, width=0.4*cm, height=0.4*cm)

    return im


def getCustomStyles(params):
    
    # Load default sample styles
    styles = getSampleStyleSheet()
        
    styles['Normal'].fontName = params['fontname']
    styles['Normal'].fontSize = 11

    
    # Name Style
    styles.add(ParagraphStyle(
        name='name',
        parent=styles['Heading1'],  # Start with an existing style
        fontSize=28,
        fontName=params['fontname_headers'],
        bold=True,
        #textColor=params['color_hex'],
        textColor='#BC3B5E',
    ))
    
    # Subheader Style
    styles.add(ParagraphStyle(
        name='subheader',
        parent=styles['Heading2'],  # Start with an existing style
        fontSize=14,
        fontName='calibri',
        textColor=params['color_grey_hex'],  # Assuming params['color_grey_hex'] is defined elsewhere
    ))

    
    # Contact Style
    styles.add(ParagraphStyle(
    name='contact',
    parent=styles['Normal'],  # Start with an existing style
    fontName = 'calibri_light',
    textColor=params['color_grey_hex'],  # Assuming params['color_grey_hex'] is defined elsewhere
    fontSize=10,              # Change font size
    )) 

    
    # Section titles Style
    styles.add(ParagraphStyle(
        name='section',
        parent=styles['Heading3'],  # Start with an existing style
        textColor=params['color_hex'],
        fontSize=14,
        fontName=params['fontname_headers'],
        italic=False,
        bold=True,
    ))
    
    

    # strengths titles Style
    styles.add(ParagraphStyle(
        name='strengths',
        parent=styles['Normal'],  # Start with an existing style
        fontSize=12,
        textColor=params['color_hex'],
        fontName=params['fontname'],
        alignment = 0,
    ))
    
    # Data Style
    styles.add(ParagraphStyle(
        name='data',
        parent=styles['Normal'],  # Start with an existing style
        fontSize=11,
        fontName=params['fontname'],
        alignment=4,  # justified
        textColor="Black",
    ))
    
    # Skill Style
    styles.add(ParagraphStyle(
        name='skill',
        parent=styles['Normal'],  # Start with an existing style
        fontSize=11,
        textColor="Black",
        fontName=params['fontname'],
    ))

    
    # Subsection Style (which is same as skill_style)
    styles.add(ParagraphStyle(
        name='subsection',
        parent=styles['skill'],  # Start with an existing style
    ))    
    
    # Dates Style
    styles.add(ParagraphStyle(
        name='dates',
        parent=styles['Normal'],
        fontSize=10,
        fontName='calibri_light',
        textColor=colors.Color(params['gray_level'], params['gray_level'], params['gray_level']),
        italic=True,
    ))
    
    # Location Style
    styles.add(ParagraphStyle(
        name='location',
        parent=styles['Normal'],
        fontSize=11,
        fontName='calibri_light',
        textColor=colors.Color(params['gray_level'], params['gray_level'], params['gray_level']),
        alignment = TA_LEFT,
    ))
    
    # Position Style
    styles.add(ParagraphStyle(
        name='position',
        parent=styles['Normal'],
        fontSize=12,
        fontName='calibri_bold',
        textColor='Black',
        bold=True,
    ))
    
    # Description Style
    styles.add(ParagraphStyle(
        name='description',
        parent=styles['Normal'],
        fontSize=11,
        fontName='calibri',
        textColor='Black',
    ))
    
    # Project Style
    styles.add(ParagraphStyle(
        name='project',
        parent=styles['Normal'],
        fontSize=11,
        fontName='calibri_bold',
        textColor='Black',
    ))    
    
    # Publications Style
    styles.add(ParagraphStyle(
        name='publications',
        parent=styles['Normal'],
        fontSize=11,
        italic=True,
        textColor=colors.Color(params['gray_level'], params['gray_level'], params['gray_level']),
        fontName='calibri_light',
    ))
    
    # List Style
    styles.add(ParagraphStyle(
        name='list',
        parent=styles['Normal'],
        fontSize=11,
        fontName='calibri',
        textColor='Black',
        alignment = TA_LEFT,
        
    ))    
    
    params['styles']  = styles
    return styles, params


def format2Bullets(text,params,separator=','):
    styles = params['styles']
    bullet_style = ParagraphStyle('bulletStyle', parent=styles['Normal'], 
                                      bulletFontName='Calibri', bulletFontSize=12, bulletIndent=0, alignment=TA_LEFT)        
        
    bullet_elements = [Paragraph("â¢ " + item, style=bullet_style) for item in text.split(separator)]

    return bullet_elements

def formatListWithNewLine(text,params,separator='\n'):
    styles = params['styles']
    
    bullet_style = ParagraphStyle('bulletStyle', parent=styles['Normal'], 
                                      bulletFontName='Calibri', bulletFontSize=12, bulletIndent=0, alignment=TA_LEFT)        
    list_elements = [Paragraph(item, style=bullet_style) for item in text.split(separator)]
    
    return list_elements

def get_content_footer(data,params):
    #frame = params['frame_footer']
    styles = params['styles']
    p = Paragraph('CV generated by sheet2CV',styles['footer'])
    return p


def get_content_header(data,params):
    

    styles = params['styles']
    contact = data['contact']
    ################################################################################################
    #### - LEFT_COLUMN
    frame = params['frame_header']
    aH = frame._aH

    # add photo
    url = "icons/photo.png"
    c=1.8
    pw = 2.7903*c
    ph = 2*c
    photo = ReportLabImage(url, width=pw*cm, height=ph*cm)#1038 Ã 744 pixels


    # Create a list to hold elements
    tab = Table([
        [photo,   Paragraph(contact['name'].upper()    , styles['name'])       ],
        ['',   Paragraph(contact['title']           , styles['subheader'])  ]
        ],
        rowHeights=0.5*aH,
        colWidths=[3*cm, None],
        vAlign='MIDDLE',
    )
    
    # Apply style to the table. The tuple structure is (column_start, row_start, column_end, row_end).

    tab.setStyle(TableStyle([
        ('SPAN',   (0, 0), (0, -1)),  # Span the photo cell across two rows
        ('VALIGN', (0, 0), (0, -1), 'BOTTOM'),# first column
        ('VALIGN', (1, 0), (1, -1), 'MIDDLE'),# second column
        
        ('HALIGN',          (0, 0), (-1, -1), 'LEFT'),
        ('TOPPADDING',      (0, 0), (-1, -1), 0),
        ('BOTTOMPADDING',   (0, 0), (-1, -1), 0),
        ('LEFTPADDING',     (0, 0), (-1, -1), 0),
        ('RIGHTPADDING',    (0, 0), (-1, -1), 0),
        
        ('LEFTPADDING', (0, 0), (0, -1), -1*cm),# first column, move photo left
        ('LEFTPADDING', (1, 0), (1, -1), 1*cm),# second column, move text right 
        #('GRID', (0, 0), (-1, -1), 1, colors.blue),  # Uncomment to see the grid for debugging
    ]))
            
    
    return tab



def  get_content_contact(data,params):
    styles = params['styles']
    contact = data['contact']
    
    ################################################################################################
    #### - RIGHT_COLUMN

    # Add the rest of the personal information in the right column
    RIGHT_COLUMN = []
    for key, value in contact.items():
        if key not in ['name', 'title']:
            icon = ''
            text = ''
            if key in ['mobile' , 'address' ,'email','nationality']:
                url = f"icons/{key}.png"
                logo = changeLogo(url,params['gray_level'])
                
                #logo = ReportLabImage(im, width=0.4*cm, height=0.4*cm)             

            elif key == 'linkedin':
                url = f"icons/{key}.png"
                
                logo = changeLogo(url,params['gray_level'])
                
                #logo = ReportLabImage(im, width=0.4*cm, height=0.4*cm)
                text = value.replace('https://www.linkedin.com/in/','')
                text = f'<link href="{value}">{text}</link>'
            elif key == 'github':
                url = f"icons/{key}.png"
                
                logo = changeLogo(url,params['gray_level'])
                
                #logo = ReportLabImage(im, width=0.4*cm, height=0.4*cm)
                text = value.replace('https://github.com/','')
                text = f'<link href="{value}">{text}</link>'


            if icon == '': # if no unicode defined, use image.png for the icons folder and put it in table
                

                if text == '':# if  no link in this row , use image.png for the icons folder
                    
                # Create a table with one row for the logo and text
                    logo_text_table = Table([[logo, Paragraph(' '+value, styles['contact'])]], colWidths=[0.4*cm, 6*cm])
                else:
                    logo_text_table = Table([[logo, Paragraph(' '+text, styles['contact'])]], colWidths=[0.4*cm, 6*cm])
                
                # Apply some styling if needed (like padding, borders etc.)
                table_style = TableStyle([
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    ('LEFTPADDING', (0, 0), (-1, -1), 0),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 5),
                    ('ALIGN', (0, 0), (-1, -1), 'RIGHT'),
                    ('TOPPADDING', (0, 0), (-1, -1), .01),     
                    ('BOTTOMPADDING', (0, 0), (-1, -1), .01),
                ])
                logo_text_table.setStyle(table_style)
                
                RIGHT_COLUMN.append(logo_text_table)
                                
            else: # if  unicode defined in icon 
                info_paragraph = Paragraph(f"{icon} {value}", styles['contact'])
                RIGHT_COLUMN.append(info_paragraph)

    current_frame = params['frame_contact']
    aH = current_frame._aH
    tab =Table(
        [[RIGHT_COLUMN]],
        rowHeights=aH,
        vAlign='MIDDLE',
        )
    
    tab.setStyle(TableStyle(
        [
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]
        ))

    return tab

def get_content_body(data,params):
    sections = data.keys()
    styles = params['styles']
    line_width =params['line_width1']
    
    ################################################################################################
    #### - LEFT COLUMN
    LEFT_COLUMN = []

    
    ################################################################################################
    ####  KEY SKILLS
    if 'key_skills' in sections:
        key_skills= data['key_skills']
    
        LEFT_COLUMN = addSection(LEFT_COLUMN,'STRENGTHS',line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])
    
        
        
        nk = len(key_skills)
        for i in range(1,nk+1):
            
            skill= key_skills[i-1]['skill'].upper()
            description = key_skills[i-1]['description']
            text = '<font color="{}">{}</font> '.format(params['color_hex'], skill)
                                    
            LEFT_COLUMN.append(Paragraph(text,  styles['strengths']))
            LEFT_COLUMN.append(Paragraph(description,  styles['data']))
            LEFT_COLUMN.append(Spacer(1, 0.3*cm))



    ################################################################################################
    #### EXPERIENCE
    ################################################################################################
    
    if 'experience' in sections:
        experience = data['experience']
    
        LEFT_COLUMN = addSection(LEFT_COLUMN,'Experience',line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])
    
    
    
    
        nexp = len(experience)
        #####
        # add experiences
        for iexp in range(1,nexp+1):
            e = experience[iexp-1]
            date1 = e['datestart']
            date2 = e['dateend']
            company = e['company']
            location = e['location'] +' ('+ company +')' 
            position = '<b>'+e['position']+'</b>'
            spacer = e['spacer']
            
            if 'achievements' in e:
                LEFT_COLUMN = addEvent(LEFT_COLUMN,date1,date2,position,location,params,
                                   descriptions=e['descriptions'],
                                   publications=e['publications'],
                                   achievements=e['achievements'] )
                
                LEFT_COLUMN.append(Spacer(1, 0.2*cm))

            else:
                LEFT_COLUMN = addEvent(LEFT_COLUMN,date1,date2,position,location,params,
                                   descriptions=e['descriptions'],
                                   publications=e['publications'])  
            
            if spacer != []:
                
                LEFT_COLUMN.append(Spacer(1, spacer*cm))      

    
    ################################################################################################
    #### EDUCATION
    ################################################################################################
    
    if 'education' in sections:
        education =data['education']
    
        LEFT_COLUMN = addSection(LEFT_COLUMN,'Education',line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])
       
        
        nedu = len(education)
        for i in range(1,nedu+1):
            location = education.loc[i-1, 'location']
            position = '<b>'+education.loc[i-1, 'fieldvalue']+'</b>'
            date1 = education.loc[i-1, 'datestart']
            date2 = education.loc[i-1, 'dateend']
            LEFT_COLUMN = addEvent(LEFT_COLUMN,date1,date2,position,location,params)
        
            
    return LEFT_COLUMN



def get_content_column1(data,params):
    
    # unpack data
    sections = data.keys()

    
    styles = params['styles']
    line_width = params['line_width2']
    
    RIGHT_COLUMN = []
    
    ################################################################################################
    #### SKILLS
    if 'skills' in sections:
        skills = data['skills']

        RIGHT_COLUMN = addSection(RIGHT_COLUMN,'Skills',line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])
    
        if ',' in skills and ';' in skills:
            skills_list = skills.split(';')
        else:
            skills_list = skills.split(',')
        
        # Bullet point style
        bullet_style = ParagraphStyle('bulletStyle', parent=styles['Normal'], 
                                      bulletFontName='Calibri', bulletFontSize=12, bulletIndent=0, alignment=TA_LEFT)
    
    
        bullet_elements = [Paragraph("â¢ " + item, style=bullet_style) for item in skills_list]
    
        RIGHT_COLUMN.extend(bullet_elements)
    
    ################################################################################################
    #### TECH LANGUAGES
    if 'tech_skills' in sections:
        tech_skills= data['tech_skills']

        RIGHT_COLUMN = addSection(RIGHT_COLUMN,'Tech languages',line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])
        
        this_frame = params['frame_column']
        column_width = this_frame.width
        doBULLETPOINTS = False
        if doBULLETPOINTS:
            bullet_elements = []
            bullet_elements = [Paragraph("â¢ " + item, style=bullet_style) for item in tech_skills.split(';')]
            
            RIGHT_COLUMN.extend(bullet_elements)
        else:
            
            RIGHT_COLUMN = addHealthBarList(RIGHT_COLUMN,tech_skills,params,width=column_width)
            


    ################################################################################################
    #### LANGUAGES
    if 'languages' in sections:
        languages = data['languages']

        RIGHT_COLUMN = addSection(RIGHT_COLUMN,'Languages',line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])
        doBULLETPOINTS = False
        if doBULLETPOINTS:
            bullet_elements = []
            bullet_elements = [Paragraph("â¢ " + item, style=bullet_style) for item in languages.split(';')]
            RIGHT_COLUMN.extend(bullet_elements)
        else:
            
            RIGHT_COLUMN = addHealthBarList(RIGHT_COLUMN,languages, params,width=column_width)



    

    ################################################################################################
    #### ABOUT ME
    
 

    if 'about_me' in sections:
        about_me = data['about_me']

        RIGHT_COLUMN = addSection(RIGHT_COLUMN,'About me',line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])   
        
        FORMATING = 'bullets'
        
        if FORMATING == 'bullets':
            
            title_text = '<font color="{}">INTERESTS</font>'.format(params['color_hex'])
            RIGHT_COLUMN.append(Paragraph(title_text,  styles['subsection']))
            bullet_elements = []
            bullet_elements = [Paragraph("â¢ " + item, style=bullet_style) for item in about_me['interests'].split(',')]
            RIGHT_COLUMN.extend(bullet_elements) 
            
            RIGHT_COLUMN.append(Spacer(1, 0.8*params['vertical_offset']*cm))      
            
            title_text = '<font color="{}">PERSONALITY</font>'.format(params['color_hex'])
            RIGHT_COLUMN.append(Paragraph(title_text,  styles['subsection']))
            bullet_elements = []
            bullet_elements = [Paragraph("â¢ " + item, style=bullet_style) for item in about_me['personality'].split(',')]
            RIGHT_COLUMN.extend(bullet_elements)
            
            
       
            
        else:
            # Create the paragraphs with new lines after titles
            personality_text = '<font color="{}">PERSONALITY</font><br/> {}'.format(params['color_hex'], about_me['personality'])
            interests_text = '<font color="{}">INTERESTS</font><br/> {}'.format(params['color_hex'], about_me['interests'])
    
            RIGHT_COLUMN.append(Paragraph(interests_text, styles['subsection']))
            RIGHT_COLUMN.append(Spacer(1, 0.5*params['vertical_offset']*cm))      
            RIGHT_COLUMN.append(Paragraph(personality_text,  styles['subsection']))
    ################################################################################################
    #### REFERENCES
    
    if 'references' in sections:
        RIGHT_COLUMN = addSection(RIGHT_COLUMN,'References',line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])   
        this_content = format2Bullets(data['references'],params)
        RIGHT_COLUMN.extend(this_content)
        

    
    return RIGHT_COLUMN

def  get_date_list_table(data,params,date_col_width=1.4):
    styles = params['styles']
    
    tbl_data = []
    for idx,row in data.iterrows():
        
        date_tbl = get_date_table(row['datestart'],row['dateend'],params,date_col_width,vAlign='MIDDLE')
        
        #loc_tabl = get_location_table(row['location']), params, available_width)
        loc_txt = row['location']
        if not isinstance(loc_txt, str):
            p = Paragraph(row["fieldvalue"] ,styles['list'])
        else:
            p = Paragraph(row["fieldvalue"] + ' (' +  loc_txt + ')',styles['list'])
        this_tbl_row = [date_tbl,p]
        tbl_data.append(this_tbl_row)           
    
    
    col2_width = params['frame_column'].width/cm-date_col_width
    tab = Table(
                tbl_data,
                colWidths=[date_col_width*cm,col2_width*cm],
                vAlign='MIDDLE',
                )
    tab.setStyle(TableStyle(
            [
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]
            ))
    

    return tab

def get_content_column2(data,params):
    
    # unpack data
    sections = data.keys()

    
    styles = params['styles']
    line_width = params['line_width2']
    
    RIGHT_COLUMN = []
    
    
    ################################################################################################
    #### AWARDS
    OPTION_LISTING_STYLE = 'table'
    thisSection = 'awards'
    if thisSection in sections:
        
        RIGHT_COLUMN = addSection(RIGHT_COLUMN,thisSection.capitalize(),line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])   
        if OPTION_LISTING_STYLE=='table':
            this_content = get_date_list_table(data[thisSection],params)
            RIGHT_COLUMN.append(this_content)
        else:
            this_content=[]
    
            for idx,row in data[thisSection].iterrows():
                
                date_text = get_date_text(row['datestart'],row['dateend'])
                text = date_text+": " +row["fieldvalue"]
                this_content.append(Paragraph(text,styles['list']))        
            
            RIGHT_COLUMN.extend(this_content)

          
    ################################################################################################
    #### CONFERENCES 
    thisSection = 'conferences'
    if thisSection in sections:
        
        RIGHT_COLUMN = addSection(RIGHT_COLUMN,thisSection.capitalize(),line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])   
        if OPTION_LISTING_STYLE =='table':
            this_content = get_date_list_table(data[thisSection],params)
            RIGHT_COLUMN.append(this_content)
        else:
            this_content=[]
    
            for idx,row in data[thisSection].iterrows():
                
                date_text = get_date_text(row['datestart'],row['dateend'])
                text = date_text+": " +row["fieldvalue"]
                this_content.append(Paragraph(text,styles['list']))        
            
            RIGHT_COLUMN.extend(this_content)


       
    # if 'conferences' in sections:
    #     RIGHT_COLUMN = addSection(RIGHT_COLUMN,'Conferences',line_width,params['color_hex'],params['fontname_headers'],params['vertical_offset'])   
    #     this_content=[]
    #     for idx,conf in data['conferences'].iterrows():
    #         date_text = get_date_text(conf['datestart'],conf['dateend'])
    #         conf_text = date_text+": " +conf["fieldvalue"]+" ("+conf['location']+")"
    #         this_content.append(Paragraph(conf_text,styles['list']))
        
    #     RIGHT_COLUMN.extend(this_content)

    return RIGHT_COLUMN
 
def createFrames(params):
    
    # Create a SimpleDocTemplate with your desired output file and page size
    filename = params['save_path']
    doc = SimpleDocTemplate(filename, pagesize=A4)
    
    # Create a PageTemplate for the first page with header frame and two columns below frame
    HH = 0.12*H
    vOffset = -0.3*cm
    BH = H-HH-vOffset-2*cm
    BW = W*0.6
    X2 = 2*cm+BW
    CW = W-3*cm-BW
    CxOff = 1.8*cm
    
    showBoundary=0

    #                        X             Y             WIDTH      HEIGHT             
    frame_header =  Frame(   1*cm,         H-HH,         BW,        HH,       id='frame_header',     showBoundary=showBoundary,leftPadding=0,bottomPadding=0,  rightPadding=0, topPadding=0)
    frame_contact = Frame(   X2+CxOff,     H-HH,         CW-CxOff,  HH,       id='frame_contact',    showBoundary=showBoundary,leftPadding=0,bottomPadding=0,  rightPadding=0, topPadding=0)
    frame_column =  Frame(   X2,           1*cm,         CW,        BH,       id='frame_column',     showBoundary=showBoundary)
    frame_body   =  Frame(   1*cm,         1*cm ,        BW,        BH,       id='frame_body',       showBoundary=showBoundary)
    
    # make frames on page 2
    frame_body2    = Frame(   1*cm,      1*cm,          BW,        BH,       id='frame_body2',     showBoundary=showBoundary)
    frame_column2 =  Frame(   X2,           1*cm,         CW,        BH,       id='frame_column2',     showBoundary=showBoundary)
    
    # store params
    params['header_height'] = HH
    params['line_width1']=BW-0.4*cm
    params['line_width2']=CW-0.5*cm
    
    template1 = PageTemplate(id='firstpage', frames=[frame_header, frame_contact, frame_column, frame_body],onPage=colored_banner_and_footer)
    
    template2 = PageTemplate(id='otherpages',frames=[frame_body2, frame_header, frame_contact,frame_column2], onPage=colored_banner_and_footer)
    
    frame_column.nextFrame = frame_column2
    # Add page templates to the documents
    doc.addPageTemplates([template1 ,template2])
    
    # Add templates to params
    params['template1']=template1
    params['template2']=template2
    
    # Add frames to params
    params['frame_header']=frame_header
    params['frame_contact']=frame_contact
    params['frame_column']=frame_column
    params['frame_body']=frame_body
    params['frame_body2']=frame_body2
    params['frame_column2']=frame_column2
    
    doc.params = params
    return doc,params    
 
    
def generatePDFresume(data, params):

    
    params = checkParams(params)
    styles,params = getCustomStyles(params)
    doc, params= createFrames(params)

    content = []


    ################################################################################################
    #### HEADER FRAME
    content.append(get_content_header(data,params))
    content.append(FrameBreak())  # Move to the next frame

    ################################################################################################
    #### CONTACT FRAME
    content.append(get_content_contact(data,params))
    content.append(FrameBreak())  # Move to the next frame


    
    ################################################################################################
    #### COLUMN PAGE 1
    content.extend(get_content_column1(data,params))
    content.append(FrameBreak())  # Move to the next frame     

    #### NEW PAGE TEMPLATE # Before adding content that might flow to the second page, set the next page template
    content.append(NextPageTemplate('otherpages'))
    
    ################################################################################################
    #### BODY
    content_body=get_content_body(data,params)
    content.extend(content_body)
    content.append(FrameBreak())  # Move to the next frame


    ################################################################################################
    #### HEADER FRAME
    content.append( get_content_header(data,params))
    content.append(FrameBreak())  # Move to the next frame

    ################################################################################################
    #### CONTACT FRAME
    content.append(get_content_contact(data,params))
    content.append(FrameBreak())  # Move to the next frame
    
    ################################################################################################
    #### COLUMN PAGE 2
    content.extend(get_content_column2(data,params))
    content.append(FrameBreak())  # Move to the next frame            

    ################################################################################################
    #### Build the PDF document
    doc.build(content)




